verify(round(mean(ptratio_std)) == 0) %>%
verify(sd(ptratio_std) == 1) %>%
verify(round(mean(lstat_std)) == 0) %>%
verify(sd(lstat_std) == 1) %>%
verify(round(mean(medv_std)) == 0) %>%
verify(sd(medv_std) == 1) %>%
tofactor(c("rad", "chas")) %>% # tofact fe function 1
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact)) %>%
select(medv,everything())
View(df)
sd(df$indus_std)
# test whether the crime_level,black_level, rad_factor, chas_factor and the original variables.
#if you name the new variable different, remeber to change the argument in the function.
df <- tofactor(df,c("rad","chas"))
df <- varstd(df,var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv"))
df_new <- df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
varstd(var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv")) %>% #std function
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(crim_std)) == 0) %>%
verify(sd(crim_std) == 1) %>%
verify(round(mean(zn_std)) == 0) %>%
verify(sd(zn_std) == 1) %>%
verify(round(mean(nox_std)) == 0) %>%
verify(sd(nox_std) == 1) %>%
verify(round(mean(rm_std)) == 0) %>%
verify(sd(rm_std) == 1) %>%
verify(round(mean(age_std)) == 0) %>%
verify(sd(age_std) == 1) %>%
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(tax_std)) == 0) %>%
verify(sd(tax_std) == 1) %>%
verify(round(mean(ptratio_std)) == 0) %>%
verify(sd(ptratio_std) == 1) %>%
verify(round(mean(lstat_std)) == 0) %>%
verify(sd(lstat_std) == 1) %>%
verify(round(mean(medv_std)) == 0) %>%
verify(sd(medv_std) == 1) %>%
tofactor(c("rad", "chas")) %>% # tofact fe function 1
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact)) %>%
select(medv,everything())
# test whether the crime_level,black_level, rad_factor, chas_factor and the original variables.
#if you name the new variable different, remeber to change the argument in the function.
df_new <- df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
varstd(var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv")) %>% #std function
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(crim_std)) == 0) %>%
verify(sd(crim_std) == 1) %>%
verify(round(mean(zn_std)) == 0) %>%
verify(sd(zn_std) == 1) %>%
verify(round(mean(nox_std)) == 0) %>%
verify(sd(nox_std) == 1) %>%
verify(round(mean(rm_std)) == 0) %>%
verify(sd(rm_std) == 1) %>%
verify(round(mean(age_std)) == 0) %>%
verify(sd(age_std) == 1) %>%
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(tax_std)) == 0) %>%
verify(round(sd(tax_std)) == 1) %>%
verify(round(mean(ptratio_std)) == 0) %>%
verify(sd(ptratio_std) == 1) %>%
verify(round(mean(lstat_std)) == 0) %>%
verify(sd(lstat_std) == 1) %>%
verify(round(mean(medv_std)) == 0) %>%
verify(sd(medv_std) == 1) %>%
tofactor(c("rad", "chas")) %>% # tofact fe function 1
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact)) %>%
select(medv,everything())
# test whether the crime_level,black_level, rad_factor, chas_factor and the original variables.
#if you name the new variable different, remeber to change the argument in the function.
df_new <- df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
varstd(var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv")) %>% #std function
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(crim_std)) == 0) %>%
verify(sd(crim_std) == 1) %>%
verify(round(mean(zn_std)) == 0) %>%
verify(sd(zn_std) == 1) %>%
verify(round(mean(nox_std)) == 0) %>%
verify(round(sd(nox_std)) == 1) %>%
verify(round(mean(rm_std)) == 0) %>%
verify(sd(rm_std) == 1) %>%
verify(round(mean(age_std)) == 0) %>%
verify(sd(age_std) == 1) %>%
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(tax_std)) == 0) %>%
verify(round(sd(tax_std)) == 1) %>%
verify(round(mean(ptratio_std)) == 0) %>%
verify(sd(ptratio_std) == 1) %>%
verify(round(mean(lstat_std)) == 0) %>%
verify(sd(lstat_std) == 1) %>%
verify(round(mean(medv_std)) == 0) %>%
verify(sd(medv_std) == 1) %>%
tofactor(c("rad", "chas")) %>% # tofact fe function 1
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact)) %>%
select(medv,everything())
# test whether the crime_level,black_level, rad_factor, chas_factor and the original variables.
#if you name the new variable different, remeber to change the argument in the function.
df_new <- df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
varstd(var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv")) %>% #std function
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(crim_std)) == 0) %>%
verify(sd(crim_std) == 1) %>%
verify(round(mean(zn_std)) == 0) %>%
verify(sd(zn_std) == 1) %>%
verify(round(mean(nox_std)) == 0) %>%
verify(round(sd(nox_std)) == 1) %>%
verify(round(mean(rm_std)) == 0) %>%
verify(sd(rm_std) == 1) %>%
verify(round(mean(age_std)) == 0) %>%
verify(sd(age_std) == 1) %>%
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(tax_std)) == 0) %>%
verify(round(sd(tax_std)) == 1) %>%
verify(round(mean(ptratio_std)) == 0) %>%
verify(rround(sd(ptratio_std)) == 1) %>%
verify(round(mean(lstat_std)) == 0) %>%
verify(sd(lstat_std) == 1) %>%
verify(round(mean(medv_std)) == 0) %>%
verify(sd(medv_std) == 1) %>%
tofactor(c("rad", "chas")) %>% # tofact fe function 1
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact)) %>%
select(medv,everything())
# test whether the crime_level,black_level, rad_factor, chas_factor and the original variables.
#if you name the new variable different, remeber to change the argument in the function.
df_new <- df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
varstd(var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv")) %>% #std function
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(crim_std)) == 0) %>%
verify(sd(crim_std) == 1) %>%
verify(round(mean(zn_std)) == 0) %>%
verify(sd(zn_std) == 1) %>%
verify(round(mean(nox_std)) == 0) %>%
verify(round(sd(nox_std)) == 1) %>%
verify(round(mean(rm_std)) == 0) %>%
verify(sd(rm_std) == 1) %>%
verify(round(mean(age_std)) == 0) %>%
verify(sd(age_std) == 1) %>%
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(tax_std)) == 0) %>%
verify(round(sd(tax_std)) == 1) %>%
verify(round(mean(ptratio_std)) == 0) %>%
verify(round(sd(ptratio_std)) == 1) %>%
verify(round(mean(lstat_std)) == 0) %>%
verify(sd(lstat_std) == 1) %>%
verify(round(mean(medv_std)) == 0) %>%
verify(sd(medv_std) == 1) %>%
tofactor(c("rad", "chas")) %>% # tofact fe function 1
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact)) %>%
select(medv,everything())
# test whether the crime_level,black_level, rad_factor, chas_factor and the original variables.
#if you name the new variable different, remeber to change the argument in the function.
df_new <- df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
varstd(var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv")) %>% #std function
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(crim_std)) == 0) %>%
verify(sd(crim_std) == 1) %>%
verify(round(mean(zn_std)) == 0) %>%
verify(sd(zn_std) == 1) %>%
verify(round(mean(nox_std)) == 0) %>%
verify(round(sd(nox_std)) == 1) %>%
verify(round(mean(rm_std)) == 0) %>%
verify(sd(rm_std) == 1) %>%
verify(round(mean(age_std)) == 0) %>%
verify(sd(age_std) == 1) %>%
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(tax_std)) == 0) %>%
verify(round(sd(tax_std)) == 1) %>%
verify(round(mean(ptratio_std)) == 0) %>%
verify(round(sd(ptratio_std)) == 1) %>%
verify(round(mean(lstat_std)) == 0) %>%
verify(sd(lstat_std) == 1) %>%
verify(round(mean(medv_std)) == 0) %>%
verify(sd(medv_std) == 1) %>%
tofactor(c("rad", "chas")) %>% # tofact fe function 1
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact)) %>%
select(medv,everything())
# test whether the crime_level,black_level, rad_factor, chas_factor and the original variables.
#if you name the new variable different, remeber to change the argument in the function.
df_new <- df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
varstd(var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv")) %>% #std function
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(crim_std)) == 0) %>%
verify(sd(crim_std) == 1) %>%
verify(round(mean(zn_std)) == 0) %>%
verify(sd(zn_std) == 1) %>%
verify(round(mean(nox_std)) == 0) %>%
verify(round(sd(nox_std)) == 1) %>%
verify(round(mean(rm_std)) == 0) %>%
verify(sd(rm_std) == 1) %>%
verify(round(mean(age_std)) == 0) %>%
verify(sd(age_std) == 1) %>%
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(tax_std)) == 0) %>%
verify(round(sd(tax_std)) == 1) %>%
verify(round(mean(ptratio_std)) == 0) %>%
verify(round(sd(ptratio_std)) == 1) %>%
verify(round(mean(lstat_std)) == 0) %>%
verify(sd(lstat_std) == 1) %>%
verify(round(mean(medv_std)) == 0) %>%
verify(sd(medv_std) == 1) %>%
tofactor(c("rad", "chas")) %>% # tofact fe function 1
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact))
# test whether the crime_level,black_level, rad_factor, chas_factor and the original variables.
#if you name the new variable different, remeber to change the argument in the function.
df_new <- df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
varstd(var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv")) %>% #std function
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(crim_std)) == 0) %>%
verify(sd(crim_std) == 1) %>%
verify(round(mean(zn_std)) == 0) %>%
verify(sd(zn_std) == 1) %>%
verify(round(mean(nox_std)) == 0) %>%
verify(round(sd(nox_std)) == 1) %>%
verify(round(mean(rm_std)) == 0) %>%
verify(sd(rm_std) == 1) %>%
verify(round(mean(age_std)) == 0) %>%
verify(sd(age_std) == 1) %>%
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(tax_std)) == 0) %>%
verify(round(sd(tax_std)) == 1) %>%
verify(round(mean(ptratio_std)) == 0) %>%
verify(round(sd(ptratio_std)) == 1) %>%
verify(round(mean(lstat_std)) == 0) %>%
verify(sd(lstat_std) == 1) %>%
verify(round(mean(medv_std)) == 0) %>%
verify(sd(medv_std) == 1) %>%
tofactor(c("rad", "chas")) %>% # tofact fe function 1
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact)) %>%
select(medv,everything())
df_new
# test whether the crime_level,black_level, rad_factor, chas_factor and the original variables.
#if you name the new variable different, remeber to change the argument in the function.
df_final <- df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
varstd(var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv")) %>% #std function
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(crim_std)) == 0) %>%
verify(sd(crim_std) == 1) %>%
verify(round(mean(zn_std)) == 0) %>%
verify(sd(zn_std) == 1) %>%
verify(round(mean(nox_std)) == 0) %>%
verify(round(sd(nox_std)) == 1) %>%
verify(round(mean(rm_std)) == 0) %>%
verify(sd(rm_std) == 1) %>%
verify(round(mean(age_std)) == 0) %>%
verify(sd(age_std) == 1) %>%
verify(round(mean(dis_std)) == 0) %>%
verify(sd(dis_std) == 1) %>%
verify(round(mean(tax_std)) == 0) %>%
verify(round(sd(tax_std)) == 1) %>%
verify(round(mean(ptratio_std)) == 0) %>%
verify(round(sd(ptratio_std)) == 1) %>%
verify(round(mean(lstat_std)) == 0) %>%
verify(sd(lstat_std) == 1) %>%
verify(round(mean(medv_std)) == 0) %>%
verify(sd(medv_std) == 1) %>%
tofactor(c("rad", "chas")) %>% # tofact fe function 1
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact)) %>%
select(medv,everything())
library(tidyverse)
library(ggplot2)
library(fs)
library(purrr)
library(stringr)
library(assertr)
library(caret)
library(janitor)
df <- read_csv("./data/BostonHousing.csv") %>% clean_names()
#for check how many unique values for each variable.
col_uni <- function(df){
map(
map(df,unique), # apply the unique function to each column, return the unique value of each column.
length) #apply the length function to the unique value of each column, return how long the unique value is for each column so that we can know how many unique values for each column.
}
str(df)
# check how many missing values in our dataset, result is 0.
sum(is.na(df))
# check the limit (based on description) for each variable
df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat)
col_uni(df)
col_uni(df)
tof <- function(x) (as.factor(x))
tofactor <- function(df,var){
df %>%
mutate_at(var, list(fact = tof))
}
df <- tofactor(df,c("rad","chas"))
#test
is.factor(df$chas_fact)
is.factor(df$rad_fact)
df %>%
assert(is.factor,chas_fact) %>%
assert(is.factor, rad_fact)
# standardize formula
scale2 <- function(x, na.rm = FALSE) (x - mean(x, na.rm = na.rm)) / sd(x, na.rm = na.rm)
varstd <- function(df,var){
df %>%
mutate_at(var, list(std = scale2))
}
df <- varstd(df,var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv"))
#test
df %>%
select(contains("_std")) %>%
map(mean) %>%
map(round)
df %>%
select(contains("_std")) %>%
map(sd)
summary(df$crim)
ggplot(df,aes(x = crim)) +
geom_histogram()
##
crime_level <- function(df) {
df %>%
mutate(crim_level = case_when(
crim <- 0.09 ~"low",
crim <- 3.7 ~"median",
TRUE ~"high"
))
}
df <- crime_level(df)
summary(df$crim)
ggplot(df,aes(x = crim)) +
geom_histogram()
##
crime_level <- function(df) {
df %>%
mutate(crim_level = case_when(
crim <- 0.09 ~"low",
crim <- 3.7 ~"median",
TRUE ~"high"
))
}
df <- crime_level(df)
df %>%
mutate(crim_level = case_when(
crim <- 0.09 ~"low",
crim <- 3.7 ~"median",
TRUE ~"high"
)
)
summary(df$crim)
ggplot(df,aes(x = crim)) +
geom_histogram()
##
crime_level <- function(df) {
df %>%
mutate(crim_level = case_when(
crim <= 0.09 ~ "low",
crim <= 3.7 ~"median",
TRUE ~ "high"
))
}
df <- crime_level(df)
#test
df %>%
assert(in_set(c("low", "median", "high")), crim_level)
