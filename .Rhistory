df %>%
select(contains("_std")) %>%
assert(within_bounds(-1,1))
#test
df %>%
select(contains("_std")) %>%
assert(within_bounds(-1,1),crim_std)
# standardize formula
scale2 <- function(x, na.rm = FALSE) (x - mean(x, na.rm = na.rm)) / sd(x, na.rm = na.rm)
varstd <- function(df,var){
df %>%
mutate_at(var, list(std = scale2))
}
df <- varstd(df,var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv"))
#test
df %>%
select(contains("_std")) %>%
assert(within_bounds(-1,1),crim_std)
#test
df %>%
select(contains("_std")) %>%
assert(sd(crime) == 1,crim_std)
?assert
df %>%
select(contains("_std")) %>%
assert(mean() == 0, crim_std )
df %>%
select(contains("_std")) %>%
assert(mean == 0, crim_std )
#test
df %>%
select(contains("_std"))
#test
mean(df %>%
select(contains("_std")))
#test
map(df %>%
select(contains("_std")),mean)
#test
map(df %>%
select(contains("_std")),std)
map(df %>%
select(contains("_std")),sd)
map(df %>%
select(contains("_std")),mean)
-7.202981e-18
round(-7.202981e-18)
#test
round(map(df %>%
select(contains("_std")),mean))
#test
map(map(df %>%
select(contains("_std")),mean),round)
map(map(df %>%
select(contains("_std")),sd))
map(df %>%
select(contains("_std")),sd)
df %>%
select(contains("_std")) %>%
map(mean)
df %>%
select(contains("_std")) %>%
map(mean) %>%
map(round) %>%
assert(in_set(0),"crim_std")
df %>%
select(contains("_std")) %>%
map(mean) %>%
map(round) %>%
assert(in_set(0),"crim_std")
df %>%
select(contains("_std"))
df %>%
select(contains("_std")) %>%
map(mean)
df %>%
select(contains("_std")) %>%
map(mean) %>%
map(round)
df %>%
select(contains("_std")) %>%
map(mean) %>%
map(round) %>%
assert(in_set(0),"crim_std")
df %>%
select(contains("_std")) %>%
map(mean) %>%
map(round)
df %>%
select(contains("_std")) %>%
map(std)
df %>%
select(contains("_std")) %>%
map(sd)
summary(df$crim)
ggplot(df,aes(x = crim)) +
geom_histogram()
summary(df$crim)
quantile(df$crim)
quantile(df$crim,.9)
names(df)
summary(df$b)
ggplot(df,aes(x = b)) +
geom_histogram()
summary(df$b)
ggplot(df,aes(x = b)) +
geom_histogram()
summary(df$b)
summary(df$crim)
ggplot(df,aes(x = crim)) +
geom_histogram()
ggplot(df,aes(x = b)) +
geom_histogram()
summary(df$crim)
ggplot(df,aes(x = crim)) +
geom_histogram()
ggplot(df,aes(x = crim_std)) +
geom_histogram()
crime_level <- function(df) {
df %>%
mutate(crim_level = case_when(
crim <= 0.09 ~ "low",
crim <= 3.7 ~"medium",
TRUE ~ "high"
))
}
df <- crime_level(df)
#test
unique(df$crim_level)
class(df$crim_level)
library(tidyverse)
library(ggplot2)
library(fs)
library(purrr)
library(stringr)
library(assertr)
library(caret)
library(janitor)
df <- read_csv("./data/BostonHousing.csv")
#for check how many unique values for each variable.
col_uni <- function(df){
map(
map(df,unique), # apply the unique function to each column, return the unique value of each column.
length) #apply the length function to the unique value of each column, return how long the unique value is for each column so that we can know how many unique values for each column.
}
str(df)
# check how many missing values in our dataset, result is 0.
sum(is.na(df))
# check the limit (based on description) for each variable
df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat)
col_uni(df)
col_uni(df)
tof <- function(x) (as.factor(x))
tofactor <- function(df,var){
df %>%
mutate_at(var, list(fact = tof))
}
df <- tofactor(df,c("rad","chas"))
#test
is.factor(df$chas_fact)
is.factor(df$rad_fact)
df %>%
assert(is.factor,chas_fact) %>%
assert(is.factor, rad_fact)
# standardize formula
scale2 <- function(x, na.rm = FALSE) (x - mean(x, na.rm = na.rm)) / sd(x, na.rm = na.rm)
varstd <- function(df,var){
df %>%
mutate_at(var, list(std = scale2))
}
df <- varstd(df,var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv"))
#test
df %>%
select(contains("_std")) %>%
map(mean) %>%
map(round)
df %>%
select(contains("_std")) %>%
map(sd)
summary(df$crim)
ggplot(df,aes(x = crim)) +
geom_histogram()
ggplot(df,aes(x = crim_std)) +
geom_histogram()
crime_level <- function(df) {
df %>%
mutate(crim_level = case_when(
crim <= 0.09 ~ "low",
crim <= 3.7 ~"medium",
TRUE ~ "high"
))
}
df <- crime_level(df)
#test
unique(df$crim_level)
summary(df$b)
ggplot(df,aes(x = b)) +
geom_histogram()
col_uni(df)
tof <- function(x) (as.factor(x))
tofactor <- function(df,var){
df %>%
mutate_at(var, list(fact = tof))
}
df <- tofactor(df,c("rad","chas"))
#test
is.factor(df$chas_fact)
is.factor(df$rad_fact)
df %>%
assert(is.factor,chas_fact) %>%
assert(is.factor, rad_fact)
# standardize formula
scale2 <- function(x, na.rm = FALSE) (x - mean(x, na.rm = na.rm)) / sd(x, na.rm = na.rm)
varstd <- function(df,var){
df %>%
mutate_at(var, list(std = scale2))
}
df <- varstd(df,var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv"))
#test
df %>%
select(contains("_std")) %>%
map(mean) %>%
map(round)
df %>%
select(contains("_std")) %>%
map(sd)
summary(df$crim)
ggplot(df,aes(x = crim)) +
geom_histogram()
ggplot(df,aes(x = crim_std)) +
geom_histogram()
crime_level <- function(df) {
df %>%
mutate(crim_level = case_when(
crim <= 0.09 ~ "low",
crim <= 3.7 ~"medium",
TRUE ~ "high"
))
}
df <- crime_level(df)
#test
unique(df$crim_level)
summary(df$b)
ggplot(df,aes(x = b)) +
geom_histogram()
df
dim(df)
df %>%
assert(not_na)
df %>%
assert(in_set(c("low", "median", "high")), crim_level)
df
df$crim_level
summary(df$crim)
ggplot(df,aes(x = crim)) +
geom_histogram()
ggplot(df,aes(x = crim_std)) +
geom_histogram()
crime_level <- function(df) {
df %>%
mutate(crim_level = case_when(
crim <= 0.09 ~ "low",
crim <= 3.7 ~"median",
TRUE ~ "high"
))
}
df <- crime_level(df)
#test
unique(df$crim_level)
df %>%
assert(in_set(c("low", "median", "high")), crim_level)
str(df)
summary(df$b)
ggplot(df,aes(x = b)) +
geom_histogram()
black_level <- function(df) {
df %>%
mutate(black_level = case_when(
b <= 100 ~ "few-black",
b <= 300 ~"normal",
TRUE ~ "more-black"
))
}
df <- black_level(df)
#test
unique(df$black_level)
str(df)
df %>%
assert(in_set(c("low", "median", "high")), crim_level) %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat)
df %>%
assert(in_set(c("low", "median", "high")), crim_level) %>%
assert(in_set(c("few-black","normal","more-black")),black_level) %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat)
help("success_and_error_functions")
df %>%
assert(in_set(c("low", "median", "high")), crim_level) %>%
assert(in_set(c("few-black","normal","more-black")),black_level) %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
verify(is.factor, rad_fact)
df %>%
assert(in_set(c("low", "median", "high")), crim_level) %>%
assert(in_set(c("few-black","normal","more-black")),black_level) %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
verify(is.factor(rad_fact))
df %>%
assert(in_set(c("low", "median", "high")), crim_level) %>%
assert(in_set(c("few-black","normal","more-black")),black_level) %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
verify(is.factor(rad_fact))
df %>%
assert(in_set(c("low", "median", "high")), crim_level) %>%
assert(in_set(c("few-black","normal","more-black")),black_level) %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact)) %>%
select(contains("_std")) %>%
verify(map(map(mean)),round)
df %>%
assert(in_set(c("low", "median", "high")), crim_level) %>%
assert(in_set(c("few-black","normal","more-black")),black_level) %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact)) %>%
select(contains("_std"))
df %>%
assert(in_set(c("low", "median", "high")), crim_level) %>%
assert(in_set(c("few-black","normal","more-black")),black_level) %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact)) %>%
select(contains("_std")) %>%
map(mean) %>%
map(round)
# test whether the crime_level,black_level, rad_factor, chas_factor and the original variables.
#if you name the new variable different, remeber to change the argument in the function.
df <- tofactor(df,c("rad","chas"))
df <- varstd(df,var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv"))
df <- crime_level(df)
df <- black_level(df)
df %>%
assert(in_set(c("low", "median", "high")), crim_level) %>%
assert(in_set(c("few-black","normal","more-black")),black_level) %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
verify(is.factor(rad_fact)) %>%
verify(is.factor(chas_fact))
# test the standarized function.
df %>%
select(contains("_std")) %>%
map(mean) %>%
map(round)
df %>%
select(contains("_std")) %>%
map(sd)
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(fs)
library(purrr)
library(stringr)
library(assertr)
library(caret)
library(janitor)
df <- read_csv("./data/BostonHousing.csv")
#for check how many unique values for each variable.
col_uni <- function(df){
map(
map(df,unique), # apply the unique function to each column, return the unique value of each column.
length) #apply the length function to the unique value of each column, return how long the unique value is for each column so that we can know how many unique values for each column.
}
str(df)
# check how many missing values in our dataset, result is 0.
sum(is.na(df))
# check the limit (based on description) for each variable
df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat)
col_uni(df)
df %>%
select(medv,everything())
